generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email      String  @unique
  first_name String
  last_name  String
  avatar     String?
  password   String

  created_at DateTime  @default(now())
  updated_at DateTime?

  setting           Setting?
  favoriteAddresses FavoriteAddress[]

  @@map("users")
}

model Package {
  id Int @id @default(autoincrement())

  type           String  @unique
  name           String
  requests_limit Int
  price          BigInt  @default(0)
  is_active      Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("packages")
}

model Metropolitan {
  id Int @id @default(autoincrement())

  code String @unique
  name String

  created_at DateTime  @default(now())
  updated_at DateTime?

  zipCodes ZipCodesOnMetropolitans[]

  @@map("metropolitans")
}

model State {
  id Int @id @default(autoincrement())

  code String @unique
  name String

  created_at DateTime  @default(now())
  updated_at DateTime?

  counties County[]

  @@map("states")
}

model County {
  id Int @id @default(autoincrement())

  stateId Int    @map("state_id")
  code    String @unique
  name    String

  created_at DateTime  @default(now())
  updated_at DateTime?

  state    State                @relation(fields: [stateId], references: [id])
  zipCodes ZipCodesOnCounties[]

  @@map("counties")
}

model ZipCode {
  id Int @id @default(autoincrement())

  code  String  @unique
  price Decimal

  created_at DateTime  @default(now())
  updated_at DateTime?

  counties      ZipCodesOnCounties[]
  metropolitans ZipCodesOnMetropolitans[]
  addresses     Address[]

  @@map("zip_codes")
}

model ZipCodesOnCounties {
  zipCodeId  Int      @map("zip_code_id")
  countyId   Int      @map("county_id")
  created_at DateTime @default(now())

  zipCode ZipCode @relation(fields: [zipCodeId], references: [id])
  county  County  @relation(fields: [countyId], references: [id])

  @@id([zipCodeId, countyId])
  @@map("county_zip_code")
}

model ZipCodesOnMetropolitans {
  zipCodeId      Int      @map("zip_code_id")
  metropolitanId Int      @map("metropolitan_id")
  created_at     DateTime @default(now())

  zipCode      ZipCode      @relation(fields: [zipCodeId], references: [id])
  metropolitan Metropolitan @relation(fields: [metropolitanId], references: [id])

  @@id([zipCodeId, metropolitanId])
  @@map("metropolitan_zip_code")
}

model Setting {
  id Int @id @default(autoincrement())

  userId Int  @unique @map("user_id")
  data   Json

  created_at DateTime  @default(now())
  updated_at DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("settings")
}

model Address {
  id Int @id @default(autoincrement())

  zipCodeId Int    @map("zip_code_id")
  address   String
  info      Json?

  created_at DateTime  @default(now())
  updated_at DateTime?

  zipCode           ZipCode           @relation(fields: [zipCodeId], references: [id])
  favoriteAddresses FavoriteAddress[]

  @@map("addresses")
}

model FavoriteAddress {
  userId    Int @map("user_id")
  addressId Int @map("address_id")

  info Json

  created_at DateTime  @default(now())
  updated_at DateTime?

  user    User    @relation(fields: [userId], references: [id])
  address Address @relation(fields: [addressId], references: [id])

  @@id([userId, addressId])
  @@map("favorite_addresses")
}
